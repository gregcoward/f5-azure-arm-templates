{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
  "contentVersion": "5.2.0.0",
  "parameters": {
    "adminPasswordOrKey": {
      "metadata": {
        "description": "Password or SSH public key to login to the Virtual Machine. Note: There are a number of special characters that you should avoid using for F5 product user accounts.  See [K2873](https://support.f5.com/csp/article/K2873) for details. Note: If using key-based authentication, this should be the public key as a string, typically starting with **---- BEGIN SSH2 PUBLIC KEY ----** and ending with **---- END SSH2 PUBLIC KEY ----**."
      },
      "type": "securestring"
    },
    "bigIqPassword": {
      "metadata": {
        "description": "The BIG-IQ password to use during BIG-IP licensing via BIG-IQ."
      },
      "type": "securestring"
    },
    "mgmtIpAddress": {
      "metadata": {
        "description": "MGMT subnet IP Address to use for the BIG-IP management IP address."
      },
      "type": "string"
    },
    "allowUsageAnalytics": {
      "allowedValues": [
        "Yes",
        "No"
      ],
      "defaultValue": "Yes",
      "type": "string"
    }
  },
  "variables": {
    "adminUsername": "xuser",
    "authenticationType": "password",
    "dnsLabel": "[toLower(concat('f5demo-',substring(uniqueString(resourceGroup().id),0,5)))]",
    "instanceName": "bigip",
    "instanceType": "Standard_DS2_v2",
    "imageName": "Best",
    "bigIpVersion": "13.1.0200",
    "bigIqAddress": "172.16.60.4",
    "bigIqUsername": "admin",
    "bigIqLicensePoolName": "f5demo_lic_pool",
    "bigIqLicenseSkuKeyword1": "OPTIONAL",
    "bigIqLicenseUnitOfMeasure": "OPTIONAL",
    "vnetName": "f5demo-vnet-eastus",
    "vnetResourceGroupName": "f5demo-networking-eastus",
    "mgmtSubnetName": "mgmt",
    "avSetChoice": "CREATE_NEW",
    "ntpServer": "0.pool.ntp.org",
    "timeZone": "UTC",
    "customImagePre": "OPTIONAL",
    "restrictedSrcAddress": "*",
    "tagValues": {
      "application": "APP",
      "cost": "COST",
      "environment": "ENV",
      "group": "GROUP",
      "owner": "OWNER"
    },
    "bigIpNicPortMap": {
      "1": {
        "Port": "[variables('bigIpVersion')]"
      },
      "2": {
        "Port": "443"
      },
      "3": {
        "Port": "443"
      },
      "4": {
        "Port": "443"
      },
      "5": {
        "Port": "443"
      },
      "6": {
        "Port": "443"
      }
    },
    "bigIpVersionPortMap": {
      "12.1.303000": {
        "Port": 443
      },
      "13.1.0200": {
        "Port": 8443
      },
      "443": {
        "Port": 443
      },
      "latest": {
        "Port": 8443
      }
    },
    "computeApiVersion": "2017-12-01",
    "networkApiVersion": "2017-11-01",
    "storageApiVersion": "2017-10-01",
    "location": "[resourceGroup().location]",
    "adminPasswordOrKey": "[replace(parameters('adminPasswordOrKey'),'\\n', '\n')]",
    "linuxConfiguration": {
      "disablePasswordAuthentication": true,
      "ssh": {
        "publicKeys": [
          {
            "keyData": "[variables('adminPasswordOrKey')]",
            "path": "[concat('/home/', variables('adminUsername'), '/.ssh/authorized_keys')]"
          }
        ]
      }
    },
    "subscriptionID": "[subscription().subscriptionId]",
    "resourceGroupName": "[resourceGroup().name]",
    "singleQuote": "'",
    "f5CloudLibsTag": "v4.2.0",
    "f5CloudLibsAzureTag": "v2.2.0",
    "f5NetworksTag": "v5.2.0.0",
    "f5CloudIappsTag": "v2.0.3",
    "verifyHash": "[concat(variables('singleQuote'), 'cli script /Common/verifyHash {\nproc script::run {} {\n        if {[catch {\n            set hashes(f5-cloud-libs.tar.gz) a1de46685e31463e6c103078797b90e5f29a4b94702b0522eef2364c3792414067a0bea50c4ed49784c14277a578d8b41f9ac7ba058d9ff72ef687034e5119c6\n            set hashes(f5-cloud-libs-aws.tar.gz) d0803e306c01bdf82895c8f30f3b3c2df5f76edbe1875c0ffbfea6864436ece54a73ffd02ccd1b889c324b093897702087b722f10cc7f87994f518f81d7260ea\n            set hashes(f5-cloud-libs-azure.tar.gz) a1f264a165b88c03f55d49afb4fdb5f63d80755f1afe947a02e4a36755c7fcec432495417d8084329c6c14e4c426c2e63bab92862afb760d63f584a570b119e6\n            set hashes(f5-cloud-libs-gce.tar.gz) c01b25f4d6f48d9ac21b1a6ba3553c978e4fb8ce8655947a307f27e67833c4bebf8b72fef108ea02e11b5e9aa35d33e39db8624b3db34de509d0d79959c754c7\n            set hashes(f5-cloud-libs-openstack.tar.gz) 5c83fe6a93a6fceb5a2e8437b5ed8cc9faf4c1621bfc9e6a0779f6c2137b45eab8ae0e7ed745c8cf821b9371245ca29749ca0b7e5663949d77496b8728f4b0f9\n            set hashes(asm-policy-linux.tar.gz) 63b5c2a51ca09c43bd89af3773bbab87c71a6e7f6ad9410b229b4e0a1c483d46f1a9fff39d9944041b02ee9260724027414de592e99f4c2475415323e18a72e0\n            set hashes(f5.http.v1.2.0rc4.tmpl) 47c19a83ebfc7bd1e9e9c35f3424945ef8694aa437eedd17b6a387788d4db1396fefe445199b497064d76967b0d50238154190ca0bd73941298fc257df4dc034\n            set hashes(f5.http.v1.2.0rc6.tmpl) 811b14bffaab5ed0365f0106bb5ce5e4ec22385655ea3ac04de2a39bd9944f51e3714619dae7ca43662c956b5212228858f0592672a2579d4a87769186e2cbfe\n            set hashes(f5.http.v1.2.0rc7.tmpl) 21f413342e9a7a281a0f0e1301e745aa86af21a697d2e6fdc21dd279734936631e92f34bf1c2d2504c201f56ccd75c5c13baa2fe7653213689ec3c9e27dff77d\n            set hashes(f5.aws_advanced_ha.v1.3.0rc1.tmpl) 9e55149c010c1d395abdae3c3d2cb83ec13d31ed39424695e88680cf3ed5a013d626b326711d3d40ef2df46b72d414b4cb8e4f445ea0738dcbd25c4c843ac39d\n            set hashes(f5.aws_advanced_ha.v1.4.0rc1.tmpl) de068455257412a949f1eadccaee8506347e04fd69bfb645001b76f200127668e4a06be2bbb94e10fefc215cfc3665b07945e6d733cbe1a4fa1b88e881590396\n            set hashes(f5.aws_advanced_ha.v1.4.0rc2.tmpl) 6ab0bffc426df7d31913f9a474b1a07860435e366b07d77b32064acfb2952c1f207beaed77013a15e44d80d74f3253e7cf9fbbe12a90ec7128de6facd097d68f\n            set hashes(f5.aws_advanced_ha.v1.4.0rc3.tmpl) 2f2339b4bc3a23c9cfd42aae2a6de39ba0658366f25985de2ea53410a745f0f18eedc491b20f4a8dba8db48970096e2efdca7b8efffa1a83a78e5aadf218b134\n            set hashes(asm-policy.tar.gz) 2d39ec60d006d05d8a1567a1d8aae722419e8b062ad77d6d9a31652971e5e67bc4043d81671ba2a8b12dd229ea46d205144f75374ed4cae58cefa8f9ab6533e6\n            set hashes(deploy_waf.sh) 1a3a3c6274ab08a7dc2cb73aedc8d2b2a23cd9e0eb06a2e1534b3632f250f1d897056f219d5b35d3eed1207026e89989f754840fd92969c515ae4d829214fb74\n            set hashes(f5.policy_creator.tmpl) 06539e08d115efafe55aa507ecb4e443e83bdb1f5825a9514954ef6ca56d240ed00c7b5d67bd8f67b815ee9dd46451984701d058c89dae2434c89715d375a620\n            set hashes(f5.service_discovery.tmpl) 7a4660468dffdc4f6d9aec4c1f9d22abfb3e484e7d6fe6a12fc9ab3eec3819dc34d133aea3cce4fdd87a0f4045069270061f2ea1ee7735922e4371592e498a0b\n            set hashes(f5.cloud_logger.v1.0.0.tmpl) a26d5c470e70b821621476bcfd0579dbc0964f6a54158bc6314fa1e2f63b23bf3f3eb43ade5081131c24e08579db2e1e574beb3f8d9789d28acb4f312fad8c3e\n\n            set file_path [lindex $tmsh::argv 1]\n            set file_name [file tail $file_path]\n\n            if {![info exists hashes($file_name)]} {\n                tmsh::log err \"No hash found for $file_name\"\n                exit 1\n            }\n\n            set expected_hash $hashes($file_name)\n            set computed_hash [lindex [exec /usr/bin/openssl dgst -r -sha512 $file_path] 0]\n            if { $expected_hash eq $computed_hash } {\n                exit 0\n            }\n            tmsh::log err \"Hash does not match for $file_path\"\n            exit 1\n        }]} {\n            tmsh::log err {Unexpected error in verifyHash}\n            exit 1\n        }\n    }\n    script-signature jJpTQ0bcHm9SypZSOPeKaHoUKRdTyLbz80xHYXy39dWx76geCGT5otZi4SdqGBiiwKFydQTqSVu+Uzj8TQZGg2fbxKg/Ks28Ht+nvLoTiNwZGY5o+iPse45QvltBvE+aCOIaw8a5ZBd5ZMF7A8JQpTwttUFRjFgXFu9CncAWOTypov46ve9dzRW8dRPbAImaJSby38jUIVWjv2iB3qZHz//bXjdZ5qUpFvpPH5dGzYN5SoQmUVI3kbiOpZlRJcSj8cKzQ7EsQozile5JkzPrzUeeMgOHihAZcOzgvYWl2LYe9iedixzF7ci6d4YNUuUhFfyrlrUOZSMUPtRzM3+rYQ==\n    signing-key /Common/f5-irule\n}', variables('singleQuote'))]",
    "installCloudLibs": "[concat(variables('singleQuote'), '#!/bin/bash\necho about to execute\nchecks=0\nwhile [ $checks -lt 120 ]; do echo checking mcpd\n/usr/bin/tmsh -a show sys mcp-state field-fmt | grep -q running\nif [ $? == 0 ]; then\necho mcpd ready\nbreak\nfi\necho mcpd not ready yet\nlet checks=checks+1\nsleep 1\ndone\necho loading verifyHash script\n/usr/bin/tmsh load sys config merge file /config/verifyHash\nif [ $? != 0 ]; then\necho cannot validate signature of /config/verifyHash\nexit 1\nfi\necho loaded verifyHash\n\nconfig_loc=\"/config/cloud/\"\nhashed_file_list=\"${config_loc}f5-cloud-libs.tar.gz f5.service_discovery.tmpl f5.cloud_logger.v1.0.0.tmpl\"\nfor file in $hashed_file_list; do\necho \"verifying $file\"\n/usr/bin/tmsh run cli script verifyHash $file\nif [ $? != 0 ]; then\necho \"$file is not valid\"\nexit 1\nfi\necho \"verified $file\"\ndone\necho \"expanding $hashed_file_list\"\ntar xfz /config/cloud/f5-cloud-libs.tar.gz -C /config/cloud/azure/node_modules/@f5devcentral\ntouch /config/cloud/cloudLibsReady', variables('singleQuote'))]",
    "imageNameToLower": "[toLower(variables('imageName'))]",
    "skuToUse": "[concat('f5-bigip-virtual-edition-', variables('imageNameToLower'),'-byol')]",
    "offerToUse": "[concat('f5-big-ip-', variables('imageNameToLower'))]",
    "imagePlan": {
      "name": "[variables('skuToUse')]",
      "product": "[variables('offerToUse')]",
      "publisher": "f5-networks"
    },
    "imageReference": {
      "offer": "[variables('offerToUse')]",
      "publisher": "f5-networks",
      "sku": "[variables('skuToUse')]",
      "version": "[variables('bigIpVersion')]"
    },
    "bigIpNicPortValue": "[variables('bigIpNicPortMap')['1'].Port]",
    "bigIpMgmtPort": "[variables('bigIpVersionPortMap')[variables('bigIpNicPortValue')].Port]",
    "newAvailabilitySetName": "[concat(variables('dnsLabel'), '-avset')]",
    "availabilitySetName": "[replace(variables('avSetChoice'), 'CREATE_NEW', variables('newAvailabilitySetName'))]",
    "virtualNetworkName": "[variables('vnetName')]",
    "vnetId": "[resourceId(variables('vnetResourceGroupName'),'Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
    "publicIPAddressType": "Static",
    "mgmtPublicIPAddressName": "[concat(variables('dnsLabel'), '-mgmt-pip')]",
    "mgmtPublicIPAddressId": "[resourceId('Microsoft.Network/publicIPAddresses', variables('mgmtPublicIPAddressName'))]",
    "mgmtNsgID": "[resourceId('Microsoft.Network/networkSecurityGroups/',concat(variables('dnsLabel'),'-mgmt-nsg'))]",
    "mgmtNicName": "[concat(variables('dnsLabel'), '-mgmt')]",
    "mgmtNicID": "[resourceId('Microsoft.Network/NetworkInterfaces', variables('mgmtNicName'))]",
    "mgmtSubnetId": "[concat(variables('vnetId'), '/subnets/', variables('mgmtSubnetName'))]",
    "mgmtSubnetPrivateAddress": "[parameters('mgmtIpAddress')]",
    "mgmtSubnetRef": "[concat('/subscriptions/', variables('subscriptionID'), '/resourceGroups/', variables('vnetResourceGroupName'), '/providers/Microsoft.Network/virtualNetworks/', variables('vnetName'), '/subnets/', variables('mgmtSubnetName'))]",
    "mgmtRouteGw": "`tmsh list sys management-route default gateway | grep gateway | sed 's/gateway //;s/ //g'`",
    "newDataStorageAccountName": "[concat(uniqueString(variables('dnsLabel'), resourceGroup().id, deployment().name), 'data000')]",
    "dataStorageAccountType": "Standard_LRS",
    "deploymentId": "[concat(variables('subscriptionId'), resourceGroup().id, deployment().name, variables('dnsLabel'))]",
    "allowUsageAnalytics": {
      "hashCmd": "[concat('custId=`echo \"', variables('subscriptionId'), '\"|sha512sum|cut -d \" \" -f 1`; deployId=`echo \"', variables('deploymentId'), '\"|sha512sum|cut -d \" \" -f 1`')]",
      "metricsCmd": "[concat(' --metrics customerId:${custId},deploymentId:${deployId},templateName:standalone_1nic-existing-stack-supported,templateVersion:5.2.0.0,region:', variables('location'), ',bigIpVersion:', variables('bigIpVersion') ,',licenseType:bigiq,cloudLibsVersion:', variables('f5CloudLibsTag'), ',cloudName:azure')]"
    },
    "allowUsageAnalytics": {
      "No": {
        "hashCmd": "echo AllowUsageAnalytics:No",
        "metricsCmd": ""
      },
      "Yes": {
        "hashCmd": "[concat('custId=`echo \"', variables('subscriptionId'), '\"|sha512sum|cut -d \" \" -f 1`; deployId=`echo \"', variables('deploymentId'), '\"|sha512sum|cut -d \" \" -f 1`')]",
        "metricsCmd": "[concat(' --metrics customerId:${custId},deploymentId:${deployId},templateName:standalone_1nic-existing-stack-supported,templateVersion:5.2.0.0,region:', variables('location'), ',bigIpVersion:', variables('bigIpVersion') ,',licenseType:bigiq,cloudLibsVersion:', variables('f5CloudLibsTag'), ',cloudName:azure')]"
      }
    },
    "customImage": "[replace(variables('customImagePre'), 'OPTIONAL', '')]",
    "useCustomImage": "[not(empty(variables('customImage')))]",
    "createNewCustomImage": "[contains(variables('customImage'), 'https://')]",
    "newCustomImageName": "[concat(variables('dnsLabel'), 'image')]",
    "storageProfileArray": {
      "customImage": {
        "imageReference": {
          "id": "[if(variables('createNewCustomImage'), resourceId('Microsoft.Compute/images', variables('newCustomImageName')), variables('customImage'))]"
        }
      },
      "platformImage": {
        "imageReference": "[variables('imageReference')]",
        "osDisk": {
          "createOption": "FromImage"
        }
      }
    },
    "premiumInstanceArray": [
      "Standard_DS2",
      "Standard_DS3",
      "Standard_DS4",
      "Standard_DS11",
      "Standard_DS12",
      "Standard_DS13",
      "Standard_DS14",
      "Standard_DS2_v2",
      "Standard_DS3_v2",
      "Standard_DS4_v2",
      "Standard_DS5_v2",
      "Standard_DS11_v2",
      "Standard_DS12_v2",
      "Standard_DS13_v2",
      "Standard_DS14_v2",
      "Standard_DS15_v2",
      "Standard_F2S",
      "Standard_F4S",
      "Standard_F8S",
      "Standard_F16S",
      "Standard_GS2",
      "Standard_GS3",
      "Standard_GS4",
      "Standard_GS5"
    ],
    "customConfig": "### START (INPUT) CUSTOM CONFIGURATION HERE\n",
    "installCustomConfig": "[concat(variables('singleQuote'), '#!/bin/bash\n', variables('customConfig'), variables('singleQuote'))]"
  },
  "resources": [
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "location": "[variables('location')]",
      "name": "[variables('mgmtPublicIPAddressName')]",
      "properties": {
        "dnsSettings": {
          "domainNameLabel": "[variables('dnsLabel')]"
        },
        "idleTimeoutInMinutes": 30,
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
      },
      "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
      "type": "Microsoft.Network/publicIPAddresses"
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "dependsOn": [
        "[variables('mgmtPublicIPAddressId')]",
        "[variables('mgmtNsgID')]"
      ],
      "location": "[variables('location')]",
      "name": "[variables('mgmtNicName')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "[concat(variables('instanceName'), '-ipconfig1')]",
            "properties": {
              "PublicIpAddress": {
                "Id": "[variables('mgmtPublicIPAddressId')]"
              },
              "privateIPAddress": "[variables('mgmtSubnetPrivateAddress')]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('mgmtSubnetId')]"
              }
            }
          }
        ],
        "networkSecurityGroup": {
          "id": "[variables('mgmtNsgID')]"
        }
      },
      "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
      "type": "Microsoft.Network/networkInterfaces"
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "location": "[variables('location')]",
      "name": "[concat(variables('dnsLabel'), '-mgmt-nsg')]",
      "properties": {
        "securityRules": [
          {
            "name": "mgmt_allow_https",
            "properties": {
              "access": "Allow",
              "description": "",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "[variables('bigIpMgmtPort')]",
              "direction": "Inbound",
              "priority": 101,
              "protocol": "Tcp",
              "sourceAddressPrefix": "[variables('restrictedSrcAddress')]",
              "sourcePortRange": "*"
            }
          },
          {
            "name": "ssh_allow_22",
            "properties": {
              "access": "Allow",
              "description": "",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "22",
              "direction": "Inbound",
              "priority": 102,
              "protocol": "Tcp",
              "sourceAddressPrefix": "[variables('restrictedSrcAddress')]",
              "sourcePortRange": "*"
            }
          }
        ]
      },
      "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
      "type": "Microsoft.Network/networkSecurityGroups"
    },
    {
      "apiVersion": "[variables('computeApiVersion')]",
      "condition": "[equals(toUpper(variables('avSetChoice')), 'CREATE_NEW')]",
      "location": "[variables('location')]",
      "name": "[variables('availabilitySetName')]",
      "properties": {
        "PlatformFaultDomainCount": 2,
        "PlatformUpdateDomainCount": 2
      },
      "sku": {
        "name": "Aligned"
      },
      "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
      "type": "Microsoft.Compute/availabilitySets"
    },
    {
      "apiVersion": "[variables('storageApiVersion')]",
      "kind": "Storage",
      "location": "[variables('location')]",
      "name": "[variables('newDataStorageAccountName')]",
      "sku": {
        "name": "[variables('dataStorageAccountType')]",
        "tier": "Standard"
      },
      "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
      "type": "Microsoft.Storage/storageAccounts"
    },
    {
      "apiVersion": "[variables('computeApiVersion')]",
      "condition": "[and(variables('useCustomImage'), variables('createNewCustomImage'))]",
      "location": "[variables('location')]",
      "name": "[variables('newCustomImageName')]",
      "properties": {
        "storageProfile": {
          "osDisk": {
            "blobUri": "[variables('customImage')]",
            "osState": "Generalized",
            "osType": "Linux",
            "storageAccountType": "[if(contains(variables('premiumInstanceArray'), variables('instanceType')), 'Premium_LRS', 'Standard_LRS')]"
          }
        }
      },
      "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
      "type": "Microsoft.Compute/images"
    },
    {
      "apiVersion": "[variables('computeApiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName'))]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]",
        "[variables('newCustomImageName')]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('mgmtNicName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[variables('instanceName')]",
      "plan": "[if(variables('useCustomImage'), json('null'), variables('imagePlan'))]",
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('availabilitySetName'))]"
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob]"
          }
        },
        "hardwareProfile": {
          "vmSize": "[variables('instanceType')]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('mgmtNicName'))]",
              "properties": {
                "primary": true
              }
            }
          ]
        },
        "osProfile": {
          "adminPassword": "[variables('adminPasswordOrKey')]",
          "adminUsername": "[variables('adminUsername')]",
          "computerName": "[variables('instanceName')]",
          "linuxConfiguration": "[if(equals(variables('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
        },
        "storageProfile": "[if(variables('useCustomImage'), variables('storageProfileArray').customImage, variables('storageProfileArray').platformImage)]"
      },
      "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
      "type": "Microsoft.Compute/virtualMachines"
    },
    {
      "apiVersion": "[variables('computeApiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('instanceName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('instanceName'),'/start')]",
      "properties": {
        "protectedSettings": {
          "commandToExecute": "[concat('CLOUD_LIB_DIR=/config/cloud/azure/node_modules/@f5devcentral; mkdir -p $CLOUD_LIB_DIR && cp f5-cloud-libs.tar.gz* /config/cloud; mkdir -p /var/log/cloud/azure; function cp_logs() { cd /var/lib/waagent/custom-script/download && cp `ls -r | head -1`/std* /var/log/cloud/azure; }; TMP_DIR=/mnt/creds; TMP_CREDENTIALS_FILE=$TMP_DIR/.passwd; BIG_IP_CREDENTIALS_FILE=/config/cloud/.passwd; /usr/bin/install -b -m 755 /dev/null /config/verifyHash; /usr/bin/install -b -m 755 /dev/null /config/installCloudLibs.sh; /usr/bin/install -b -m 400 /dev/null $BIG_IP_CREDENTIALS_FILE; IFS=', variables('singleQuote'), '%', variables('singleQuote'), '; echo -e ', variables('verifyHash'), ' >> /config/verifyHash; echo -e ', variables('installCloudLibs'), ' >> /config/installCloudLibs.sh; echo -e ', variables('installCustomConfig'), ' >> /config/customConfig.sh; echo ', variables('singleQuote'), parameters('bigIqPassword'), variables('singleQuote'), ' >> /config/cloud/.bigIqPasswd;  unset IFS; bash /config/installCloudLibs.sh; source $CLOUD_LIB_DIR/f5-cloud-libs/scripts/util.sh; create_temp_dir $TMP_DIR; echo ', variables('singleQuote'), variables('adminPasswordOrKey'), variables('singleQuote'), '|sha512sum|cut -d \" \" -f 1|tr -d \"\n\" > $TMP_CREDENTIALS_FILE; bash $CLOUD_LIB_DIR/f5-cloud-libs/scripts/createUser.sh --user svc_user --password-file $TMP_CREDENTIALS_FILE; f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/encryptDataToFile.js --data-file $TMP_CREDENTIALS_FILE --out-file $BIG_IP_CREDENTIALS_FILE; wipe_temp_dir $TMP_DIR;', variables('allowUsageAnalytics')[variables('allowUsageAnalytics')].hashCmd, '; /usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/onboard.js --output /var/log/cloud/azure/onboard.log --signal ONBOARD_DONE --log-level info --cloud azure --host ', variables('mgmtSubnetPrivateAddress'), ' --port ', variables('bigIpMgmtPort'), ' -u svc_user --password-url file:///config/cloud/.passwd --password-encrypted --hostname ', concat(variables('instanceName'), '.', variables('location'), '.cloudapp.azure.com'), ' --license-pool --big-iq-host ', variables('bigIqAddress'), ' --big-iq-user ', variables('bigIqUsername'), ' --big-iq-password-uri file:///config/cloud/.bigIqPasswd --license-pool-name ', variables('bigIqLicensePoolName'), ' $(format_args sku-keyword-1:', variables('bigIqLicenseSkuKeyWord1'), ',unit-of-measure:', variables('bigIqLicenseUnitOfMeasure'), ') --big-ip-mgmt-address ', reference(variables('mgmtPublicIPAddressId')).ipAddress, ' --ntp ', variables('ntpServer'), ' --tz ', variables('timeZone'), ' --db tmm.maxremoteloglength:2048', variables('allowUsageAnalytics')[variables('allowUsageAnalytics')].metricsCmd, ' --module ltm:nominal', '; if [[ $? == 0 ]]; then tmsh load sys application template f5.service_discovery.tmpl; tmsh load sys application template f5.cloud_logger.v1.0.0.tmpl; rm -f /config/cloud/.bigIqPasswd; bash /config/customConfig.sh; $(cp_logs); else $(cp_logs); exit 1; fi', '; if grep -i \"PUT failed\" /var/log/waagent.log -q; then echo \"Killing waagent exthandler, daemon should restart it\"; pkill -f \"python -u /usr/sbin/waagent -run-exthandlers\"; fi')]"
        },
        "publisher": "Microsoft.Azure.Extensions",
        "settings": {
          "fileUris": [
            "[concat('https://raw.githubusercontent.com/F5Networks/f5-cloud-libs/', variables('f5CloudLibsTag'), '/dist/f5-cloud-libs.tar.gz')]",
            "[concat('https://raw.githubusercontent.com/F5Networks/f5-cloud-iapps/', variables('f5CloudIappsTag'), '/f5-service-discovery/f5.service_discovery.tmpl')]",
            "[concat('https://raw.githubusercontent.com/F5Networks/f5-cloud-iapps/', variables('f5CloudIappsTag'), '/f5-cloud-logger/f5.cloud_logger.v1.0.0.tmpl')]"
          ]
        },
        "type": "CustomScript",
        "typeHandlerVersion": "2.0"
      },
      "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]",
      "type": "Microsoft.Compute/virtualMachines/extensions"
    }
  ],
  "outputs": {
    "GUI-URL": {
      "type": "string",
      "value": "[concat('https://', reference(variables('mgmtPublicIPAddressId')).dnsSettings.fqdn, ':', variables('bigIpMgmtPort'))]"
    },
    "SSH-URL": {
      "type": "string",
      "value": "[concat(reference(variables('mgmtPublicIPAddressId')).dnsSettings.fqdn, ' ',22)]"
    }
  }
}
